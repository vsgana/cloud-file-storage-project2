import json
import boto3
import os

s3_client = boto3.client("s3")
cognito_client = boto3.client("cognito-idp")
dynamodb = boto3.resource("dynamodb")

# Your bucket and table
BUCKET_NAME = ""
TABLE_NAME = ""

def lambda_handler(event, context):
    try:
        # Parse request body
        body = json.loads(event.get("body", "{}"))
        access_token = body.get("accessToken")
        old_file_name = body.get("oldFileName")
        new_file_name = body.get("newFileName")

        if not access_token or not old_file_name or not new_file_name:
            return {
                "statusCode": 400,
                "body": json.dumps({"message": "accessToken, oldFileName and newFileName are required"})
            }

        # Validate token and get user ID (sub)
        user_info = cognito_client.get_user(AccessToken=access_token)
        user_id = next(attr['Value'] for attr in user_info['UserAttributes'] if attr['Name'] == 'sub')

        # Build S3 keys
        old_key = f"{user_id}/{old_file_name}"
        new_key = f"{user_id}/{new_file_name}"

        # Copy the file to new key
        s3_client.copy_object(
            Bucket=BUCKET_NAME,
            CopySource={"Bucket": BUCKET_NAME, "Key": old_key},
            Key=new_key
        )

        # Delete the old file
        s3_client.delete_object(Bucket=BUCKET_NAME, Key=old_key)

        # Update DynamoDB metadata
        table = dynamodb.Table(TABLE_NAME)
        table.delete_item(Key={"userId": user_id, "fileName": old_file_name})
        table.put_item(Item={"userId": user_id, "fileName": new_file_name})

        return {
            "statusCode": 200,
            "body": json.dumps({"message": "File renamed successfully"})
        }

    except cognito_client.exceptions.NotAuthorizedException:
        return {
            "statusCode": 401,
            "body": json.dumps({"message": "Unauthorized"})
        }
    except Exception as e:
        return {
            "statusCode": 500,
            "body": json.dumps({"message": "Rename failed", "error": str(e)})
        }
