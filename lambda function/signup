import json
import boto3
import hmac
import hashlib
import base64

client = boto3.client('cognito-idp')

USER_POOL_ID = ''
CLIENT_ID = ''
CLIENT_SECRET = ''

# Secret hash generator
def get_secret_hash(username):
    message = username + CLIENT_ID
    dig = hmac.new(
        CLIENT_SECRET.encode('utf-8'),
        msg=message.encode('utf-8'),
        digestmod=hashlib.sha256
    ).digest()
    return base64.b64encode(dig).decode()

def lambda_handler(event, context):
    body = json.loads(event['body'])

    email = body.get('email')
    password = body.get('password')

    if not email or not password:
        return {
            "statusCode": 400,
            "headers": {
                "Access-Control-Allow-Origin": "*",
                "Access-Control-Allow-Credentials": True
            },
            "body": json.dumps({"message": "Email and password are required."})
        }

    try:
        # ✨ Here we attach role = viewer
        response = client.sign_up(
            ClientId=CLIENT_ID,
            Username=email,
            Password=password,
            SecretHash=get_secret_hash(email),
            UserAttributes=[
                { 'Name': 'email', 'Value': email },
               ## { 'Name': 'custom:role', 'Value': 'viewer' }  # ✅ Added this line
            ]
        )

        # Auto-confirm user (optional)
        client.admin_confirm_sign_up(
            UserPoolId=USER_POOL_ID,
            Username=email
        )

        return {
            "statusCode": 200,
            "headers": {
                "Access-Control-Allow-Origin": "*",
                "Access-Control-Allow-Credentials": True
            },
            "body": json.dumps({"message": "Signup successful."})
        }

    except client.exceptions.UsernameExistsException:
        return {
            "statusCode": 400,
            "headers": {
                "Access-Control-Allow-Origin": "*",
                "Access-Control-Allow-Credentials": True
            },
            "body": json.dumps({"message": "User already exists."})
        }

    except Exception as e:
        return {
            "statusCode": 500,
            "headers": {
                "Access-Control-Allow-Origin": "*",
                "Access-Control-Allow-Credentials": True
            },
            "body": json.dumps({"message": str(e)})
        }
